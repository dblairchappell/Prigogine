{"simulationScript": "import time\nfrom prigogine.PrigogineCore import *\n\nstart = time.clock()\nlabourmarket = prigogine.getmodel()\n\nnumHouseholds = 10000\nlabourmarket.households.create(numHouseholds)\n\nlabourmarket.households.states[0] = np.random.choice([1, 0], numHouseholds, [0.5,0.5])\nlabourmarket.households.reserveWages[0] = np.random.randint(100, size=numHouseholds)\nlabourmarket.households.weeksEmployed[0] = np.ones(numHouseholds)\nlabourmarket.households.minWages[0] = np.ones(numHouseholds) * 60\n\nlabourmarket.meanWeeksEmployed[0] = np.zeros(1)\nlabourmarket.meanReserveWages[0] = np.zeros(1)\nlabourmarket.meanMinWages[0] = np.zeros(1)\n\nmeanReserveWages = []\nmeanWeeksEmployed = []\nmeanMinWages = []\n\nfor i in range(100):\n    labourmarket.runModel(1)\n    meanWeeksEmployed.append(labourmarket.meanWeeksEmployed[labourmarket.readIndex][0])\n    meanReserveWages.append(labourmarket.meanReserveWages[labourmarket.readIndex][0])\n    meanMinWages.append(labourmarket.meanMinWages[labourmarket.readIndex][0])\n\nend = time.clock()\nprint \"\\n\\ntime elapsed: \" + str(end - start) + \"s\"\nplt.plot(meanReserveWages,'r-', meanWeeksEmployed, 'b-', meanMinWages, 'g-')\nplt.show()\n\n", "Under Development": {}, "modelCode": "model labourmarket [\n    messageboards [\n        householdIds (1,1)\n    ]\n    variables [\n        meanWeeksEmployed\n        meanReserveWages\n        meanMinWages\n    ]\n    equations [\n        self.meanWeeksEmployed[t+1] = self.households.weeksEmployed[t].mean()\n        self.meanReserveWages[t+1] = self.households.reserveWages[t].mean()\n        self.meanMinWages[t+1] = self.households.minWages[t].mean()\n    ]\n    population households [\n        variables [\n            states\n            reserveWages\n            weeksEmployed\n            minWages\n        ]\n        equations [\n            self.states[t+1][:] = 0, where (self.reserveWages[t] >= (self.minWages[t] + 100)) & (self.states[t] == 1)\n            self.reserveWages[t+1] = self.reserveWages[t] * 1.1, where self.states[t] == 1\n            self.weeksEmployed[t+1] = self.weeksEmployed[t] + 1, where self.states[t] == 1\n            self.minWages[t+1] = self.minWages[t]\n\n            self.states[t+1][:] = 1, where (self.reserveWages[t] < self.minWages[t]) & (self.states[t] == 0)\n            self.reserveWages[t+1] = self.reserveWages[t] * 0.9, where self.states[t] == 0\n            self.weeksEmployed[t+1] = self.weeksEmployed[t], where self.states[t] == 0\n            self.minWages[t+1] = self.minWages[t]\n        ]\n    ]\n]"}