{'analysisCode': 'minWages[t+1] = minWages[t]\n\n# STATE 1 IF EMPLOYED\nwhere states[t] == 1 [\n\tstates[t+1][:] = 0, where reserveWages[t] >= (minWages[t] + 100)\n\treserveWages[t+1] = reserveWages[t] * 1.1\n\tweeksEmployed[t+1] = weeksEmployed[t] + 1\n]\n\n# STATE 0 IF UNEMPLOYED\nwhere states[t] == 0 [\n\tstates[t+1][:] = 1, where reserveWages[t] < minWages[t]\n\treserveWages[t+1] = reserveWages[t] * 0.9\n\tweeksEmployed[t+1] = weeksEmployed[t]\n]', 'model': {'variables': [], 'modelName': 'labour', 'equations': '', 'populations': {'households': {'variables': ['www'], 'equations': ''}, 'firms': {'variables': ['wageOffers'], 'equations': ''}}}, 'simulationCode': 'model labourmarket [\n    variables [\n        meanWeeksEmployed\n        meanReserveWages\n        meanMinWages\n    ]\n    equations [\n        meanWeeksEmployed[t+1] = households.weeksEmployed[t].mean()\n        meanReserveWages[t+1] = households.reserveWages[t].mean()\n        meanMinWages[t+1] = households.minWages[t].mean()\n    ]\n    population households [\n        variables [\n            states\n            reserveWages\n            weeksEmployed\n            minWages\n        ]\n        equations [\n            minWages[t+1] = minWages[t]\n            states[t+1][:] = 0, where (reserveWages[t] >= (minWages[t] + 100)) & (states[t] == 1)\n            reserveWages[t+1] = reserveWages[t] * 1.1, where states[t] == 1\n            weeksEmployed[t+1] = weeksEmployed[t] + 1, where states[t] == 1\n            states[t+1][:] = 1, where (reserveWages[t] < minWages[t]) & (states[t] == 0)\n            reserveWages[t+1] = reserveWages[t] * 0.9, where states[t] == 0\n            weeksEmployed[t+1] = weeksEmployed[t], where states[t] == 0\n        ]\n    ]\n]', 'notes': 'test analysis script'}