
population "households" [

	attributes [
		"reserveWages"
		"numJobs"
		"minWage"
	]

	state "employed" [
		transition to "unemployed" if uniform(1,100) >= 75
		action [
			#print "activity whilst employed"
			#update("reserveWages", get("reserveWages") * 1.1)
		]
	]

	state "unemployed" [

		transition to "employed" if get("reserveWages") < 15 [
			action [
				print "updating numJobs: " + str(get("numJobs").mean())
				newValues = get("numJobs") * 1.1
				update("numJobs", newValues)
			]
		]

		action [
			print "updating reserveWages: " + str(get("reserveWages").mean())
			newValues = maximum( (get("reserveWages") * 0.9), get("minWage") )
			update("reserveWages", newValues)
		]

		action [
			print "updating minWage: " + str(get("minWage").mean())
			newValues = get("minWage") + 1
			update("minWage", newValues)
		]

	]

]

create "households" 10000 [
	startstate("employed")
	init("reserveWages", random.uniform(1,100,10000))
	init("numJobs", ones(10000))
	init("minWage", ones(10000) * 5)
]




